generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?   
  slug           String   @unique
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           Role
  accounts       Account[]
  sessions       Session[]
  comments    Comment[]
  requests    PurchaseRequest[]
  products       Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id             Int       @id @default(autoincrement())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  title          String
  description    String
  productType    String
  price          Int
  salesPeriodeStart DateTime
  salesPeriodeEnd DateTime
  image         String
  location       Json
  sold           Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  comments       Comment[]
  requests       PurchaseRequest[]
}


model PurchaseRequest {
  id         Int      @id @default(autoincrement())
  productId       Int
  product       Product       @relation(fields: [productId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  status     RequestStatus
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  productId      Int
  product        Product       @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  text      String
  date      DateTime @default(now())
}

enum Role {
  BUYER
  SELLER
  BOTH
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
